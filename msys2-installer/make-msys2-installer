#!/usr/bin/env bash

_thisdir="$(dirname $0)"
test "${_thisdir}" = "." && _thisdir=${PWD}
_ifwroot="${_thisdir}"/qt-ifw
_arch=$(uname -m)
_date=$(date +'%Y%m%d')
_dateqif=$(date +'%Y-%m-%d')
_version=${_date}
_filename=msys2-${_arch}-${_date}.exe
_filename2=msys2-base-${_arch}-${_date}.tar.xz
_log=/tmp/installer.log
if [ "${_arch}" = "x86_64" ]; then
  _bitness=64
else
  _bitness=32
fi

declare -a undo_commands

_exitcode=5

exit_with_undo() {
  for _cmd in ${undo_commands[@]}; do
    eval "$_cmd"
  done
  exit ${_exitcode}
}

exit_cleanly() {
  _exitcode=$1; shift;
  local _message=$1; shift;
  echo "${_message}"
  exit_with_undo
}

do_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@DATE@|${_dateqif}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|@VERSION@|${_version}|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|@BITNESS@|${_bitness}|g" "{}" \;
  undo_commands+=("undo_seds")
}

undo_seds() {
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<ReleaseDate>${_dateqif}<|<ReleaseDate>@DATE@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" \) -exec sed -i "s|<Version>${_version}<|<Version>@VERSION@<|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|msys${_bitness}|msys@BITNESS@|g" "{}" \;
  find "${_ifwroot}" \( -name "package.xml" -or -name "config.xml" -or -name "installscript.js" \) -exec sed -i "s|${_bitness}bit|@BITNESS@bit|g" "{}" \;
}

create_archives() {
  local _data="${_ifwroot}"/packages/com.msys2.root.base/data
  [ -d "${_data}" ] && rm -rf "${_data}"
  mkdir -p "${_data}"
  _dirs=
  for curr_dir in /etc /var /tmp /usr /mingw32 /mingw64 /mingw32_shell.bat /mingw64_shell.bat /msys2_shell.bat /msys2.ico /autorebase.bat autorebasebase1st.bat; do
    if [[ -d ${_newmsys}$curr_dir || -f ${_newmsys}$curr_dir ]]; then
      _dirs="${_dirs} ${_newmsys}$curr_dir"
    fi
  done
  if [ -n "$_dirs" ]; then
    _compress_cmd="${_archivegen} ${_data}/msys${_bitness}.7z ${_dirs}"
    pushd / > /dev/null
    eval ${_compress_cmd} | tee $_log 2>&1
    _result=$?
    if [ "$_result" -eq "0" ]; then
          echo " archivegen succeeded. Created ${_data}/msys${_bitness}.7z"
    else
          exit_cleanly "3" "archivegen failed. See $_log"
    fi
    popd > /dev/null

    pushd ${_newmsysbase}
     _compress_cmd2="/usr/bin/tar --transform='s/:/_/g' --dereference --hard-dereference -cJf ${_thisdir}/${_filename2} msys${_bitness}"
    eval ${_compress_cmd2} | tee $_log 2>&1
    _result=$?
    if [ "$_result" -eq "0" ]; then
          echo " tar succeeded. Created "
    else
          die "MSYS2 compressing fail. See $_log"
    fi
    popd > /dev/null
  fi
}

# Add -v to get more information.
make_installer() {
  "${_binarycreator}" \
    -t "${_installerbase}" \
    -p "${_ifwroot}/packages" \
    -c "${_ifwroot}/config/config.xml" \
    --offline-only \
    "${_filename}" \
    -v
}

trap exit_with_undo 1 2 15

_archivegen=/mingw${_bitness}/bin/archivegen.exe
_binarycreator=/mingw${_bitness}/bin/binarycreator.exe
_installerbase=/mingw${_bitness}/bin/installerbase.exe
_newmsysbase=/tmp/newmsys
_newmsys=${_newmsysbase}/msys"${_bitness}"

create_chroot_system() {
  [ -d ${_newmsysbase} ] && rm -rf ${_newmsysbase}
  mkdir -p "${_newmsys}"
  pushd "${_newmsys}" > /dev/null

  mkdir -p var/lib/pacman
  mkdir -p var/log
  mkdir -p tmp

  git_for_windows_sdk=" \
    git mingw-w64-${_arch}-toolchain \
    python less openssh patch make tar diffutils ca-certificates \
    perl-Error perl perl-Authen-SASL perl-libwww perl-MIME-tools \
    perl-Net-SMTP-SSL perl-TermReadKey winpty-git \
    mingw-w64-${_arch}-curl mingw-w64-${_arch}-expat \
    mingw-w64-${_arch}-openssl mingw-w64-${_arch}-tcl \
    mingw-w64-${_arch}-pcre \
  "
  pacman -Syu --root "${_newmsys}"
  pacman -S base $git_for_windows_sdk --noconfirm --root "${_newmsys}"
  _result=$?
  if [ "$_result" -ne "0" ]; then
    exit_cleanly "1" "failed to create newmsys2 via command 'pacman -S base $git_for_windows_sdk --noconfirm --root ${_newmsys}'"
  fi
  popd > /dev/null
}

if [ ! -f "${_archivegen}" ]; then
  eval "pacman -S --noconfirm mingw${_bitness}/mingw-w64-${_arch}-qt-installer-framework-git" | tee $_log 2>&1
fi

if [ ! -f "${_archivegen}" ]; then
  exit_cleanly "2" "installation of qt installer framework failed. See $_log"
fi

echo "Creating MSYS2 chroot system ${_newmsys}"
create_chroot_system

echo "Creating MSYS2 installer /tmp/$_filename"
[ -f /tmp/$_filename ] && rm -f /tmp/$_filename

do_seds
create_archives
make_installer
exit_cleanly "0" "All done, see ${_filename}"
